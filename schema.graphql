# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type CustomStatisticDto {
    payments: PaymentStatistics
    period: String
    users: Float
}

type DeleteManyResponse {
    "The number of records deleted."
    deletedCount: Int!
}

type Mutation {
    addWallets(input: [WalletCreate!]!): ReturnStatusType!
    checkPayment(input: CheckPaymentInput!): Payment!
    createManyPayments(input: CreateManyPaymentsInput!): [Payment!]!
    createManyStatistics(input: CreateManyStatisticsInput!): [Statistic!]!
    createManyUsers(input: CreateManyUsersInput!): [User!]!
    createManyWallets(input: CreateManyWalletsInput!): [Wallet!]!
    createOnePayment(input: CreateOnePaymentInput!): Payment!
    createOneStatistic(input: CreateOneStatisticInput!): Statistic!
    createOneUser(input: CreateOneUserInput!): User!
    createOneWallet(input: CreateOneWalletInput!): Wallet!
    createPayment(input: PaymentCreate!): Payment!
    createUser(input: UserCreate!): User!
    deleteManyPayments(input: DeleteManyPaymentsInput!): DeleteManyResponse!
    deleteManyStatistics(input: DeleteManyStatisticsInput!): DeleteManyResponse!
    deleteManyUsers(input: DeleteManyUsersInput!): DeleteManyResponse!
    deleteManyWallets(input: DeleteManyWalletsInput!): DeleteManyResponse!
    deleteOnePayment(input: DeleteOneInput!): PaymentDeleteResponse!
    deleteOneStatistic(input: DeleteOneInput!): StatisticDeleteResponse!
    deleteOneUser(input: DeleteOneInput!): UserDeleteResponse!
    deleteOneWallet(input: DeleteOneInput!): WalletDeleteResponse!
    setUserOnPayment(input: RelationInput!): Payment!
    setWalletOnPayment(input: RelationInput!): Payment!
    switchWalletStatus(id: Float!): ReturnStatusType!
    updateManyPayments(input: UpdateManyPaymentsInput!): UpdateManyResponse!
    updateManyStatistics(input: UpdateManyStatisticsInput!): UpdateManyResponse!
    updateManyUsers(input: UpdateManyUsersInput!): UpdateManyResponse!
    updateManyWallets(input: UpdateManyWalletsInput!): UpdateManyResponse!
    updateOnePayment(input: UpdateOnePaymentInput!): Payment!
    updateOneStatistic(input: UpdateOneStatisticInput!): Statistic!
    updateOneUser(input: UpdateOneUserInput!): User!
    updateOneWallet(input: UpdateOneWalletInput!): Wallet!
}

type PageInfo {
    "The cursor of the last returned record."
    endCursor: ConnectionCursor
    "true if paging forward and there are more records."
    hasNextPage: Boolean
    "true if paging backwards and there are more records."
    hasPreviousPage: Boolean
    "The cursor of the first returned record."
    startCursor: ConnectionCursor
}

type Payment {
    amount: Float
    comment: String!
    created: DateTime!
    currency: String
    expected_amount: String!
    id: Float!
    is_paid: Boolean!
    referral_id: String!
    referral_money: Float!
    updated: DateTime!
    user: User!
    user_id: String!
    user_wallet_number: String
    wallet: Wallet!
    wallet_id: String!
}

type PaymentAvgAggregate {
    amount: Float
    id: Float
}

type PaymentConnection {
    "Array of edges."
    edges: [PaymentEdge!]!
    "Paging information"
    pageInfo: PageInfo!
}

type PaymentCountAggregate {
    amount: Int
    comment: Int
    currency: Int
    id: Int
    is_paid: Int
    referral_id: Int
    user_id: Int
    user_wallet_number: Int
    wallet_id: Int
}

type PaymentDeleteResponse {
    amount: Float
    comment: String
    created: DateTime
    currency: String
    expected_amount: String
    id: Float
    is_paid: Boolean
    referral_id: String
    referral_money: Float
    updated: DateTime
    user_id: String
    user_wallet_number: String
    wallet_id: String
}

type PaymentEdge {
    "Cursor for this node."
    cursor: ConnectionCursor!
    "The node containing the Payment"
    node: Payment!
}

type PaymentMaxAggregate {
    amount: Float
    comment: String
    currency: String
    id: Float
    referral_id: String
    user_id: String
    user_wallet_number: String
    wallet_id: String
}

type PaymentMinAggregate {
    amount: Float
    comment: String
    currency: String
    id: Float
    referral_id: String
    user_id: String
    user_wallet_number: String
    wallet_id: String
}

type PaymentStatistics {
    qiwi: WalletStatistics
    webmoney: WalletStatistics
    yoomoney: WalletStatistics
}

type PaymentSumAggregate {
    amount: Float
    id: Float
}

type Query {
    allWallets: [Wallet!]!
    getUserPayments(id: String!): [Payment!]!
    oneWallet(type: String!): Wallet!
    payment(
        "The id of the record to find."
        id: ID!
    ): Payment
    payments(
        "Specify to filter the records returned."
        filter: PaymentFilter = {},
        "Limit or page results."
        paging: CursorPaging = {first : 50000},
        "Specify to sort results."
        sorting: [PaymentSort!] = []
    ): PaymentConnection!
    statistic(
        "The id of the record to find."
        id: ID!
    ): Statistic
    statistics(
        "Specify to filter the records returned."
        filter: StatisticFilter = {},
        "Limit or page results."
        paging: CursorPaging = {first : 50000},
        "Specify to sort results."
        sorting: [StatisticSort!] = []
    ): StatisticConnection!
    statisticsBy(input: StatisticsInput!): CustomStatisticDto!
    user(
        "The id of the record to find."
        id: ID!
    ): User
    users(
        "Specify to filter the records returned."
        filter: UserFilter = {},
        "Limit or page results."
        paging: CursorPaging = {first : 50000},
        "Specify to sort results."
        sorting: [UserSort!] = []
    ): UserConnection!
    wallet(
        "The id of the record to find."
        id: ID!
    ): Wallet
    wallets(
        "Specify to filter the records returned."
        filter: WalletFilter = {},
        "Limit or page results."
        paging: CursorPaging = {first : 50000},
        "Specify to sort results."
        sorting: [WalletSort!] = []
    ): WalletConnection!
}

type ReturnStatusType {
    status: String!
}

type Statistic {
    created: DateTime!
    id: Float!
    payments: String!
    updated: DateTime!
    users: Float!
}

type StatisticAvgAggregate {
    id: Float
    users: Float
}

type StatisticConnection {
    "Array of edges."
    edges: [StatisticEdge!]!
    "Paging information"
    pageInfo: PageInfo!
}

type StatisticCountAggregate {
    id: Int
    users: Int
}

type StatisticDeleteResponse {
    created: DateTime
    id: Float
    payments: String
    updated: DateTime
    users: Float
}

type StatisticEdge {
    "Cursor for this node."
    cursor: ConnectionCursor!
    "The node containing the Statistic"
    node: Statistic!
}

type StatisticMaxAggregate {
    id: Float
    users: Float
}

type StatisticMinAggregate {
    id: Float
    users: Float
}

type StatisticSumAggregate {
    id: Float
    users: Float
}

type UpdateManyResponse {
    "The number of records updated."
    updatedCount: Int!
}

type User {
    balance: Float!
    created: DateTime!
    firstname: String
    id: String!
    is_admin: Boolean!
    lang: String!
    lastname: String
    referral_counter: Float!
    referral_money: Float!
    reminder_time: Float!
    updated: DateTime!
    username: String
    who_invite: String
}

type UserAvgAggregate {
    balance: Float
    referral_counter: Float
    referral_money: Float
}

type UserConnection {
    "Array of edges."
    edges: [UserEdge!]!
    "Paging information"
    pageInfo: PageInfo!
}

type UserCountAggregate {
    balance: Int
    firstname: Int
    id: Int
    lastname: Int
    referral_counter: Int
    referral_money: Int
    username: Int
    who_invite: Int
}

type UserDeleteResponse {
    balance: Float
    created: DateTime
    firstname: String
    id: String
    is_admin: Boolean
    lang: String
    lastname: String
    referral_counter: Float
    referral_money: Float
    reminder_time: Float
    updated: DateTime
    username: String
    who_invite: String
}

type UserEdge {
    "Cursor for this node."
    cursor: ConnectionCursor!
    "The node containing the User"
    node: User!
}

type UserMaxAggregate {
    balance: Float
    firstname: String
    id: String
    lastname: String
    referral_counter: Float
    referral_money: Float
    username: String
    who_invite: String
}

type UserMinAggregate {
    balance: Float
    firstname: String
    id: String
    lastname: String
    referral_counter: Float
    referral_money: Float
    username: String
    who_invite: String
}

type UserSumAggregate {
    balance: Float
    referral_counter: Float
    referral_money: Float
}

type Wallet {
    created: DateTime!
    id: Float!
    input_money: Float!
    is_active: Boolean!
    number: String!
    token: String!
    type: String!
    updated: DateTime!
}

type WalletAvgAggregate {
    id: Float
    input_money: Float
}

type WalletConnection {
    "Array of edges."
    edges: [WalletEdge!]!
    "Paging information"
    pageInfo: PageInfo!
}

type WalletCountAggregate {
    id: Int
    input_money: Int
    is_active: Int
    number: Int
    type: Int
}

type WalletDeleteResponse {
    created: DateTime
    id: Float
    input_money: Float
    is_active: Boolean
    number: String
    token: String
    type: String
    updated: DateTime
}

type WalletEdge {
    "Cursor for this node."
    cursor: ConnectionCursor!
    "The node containing the Wallet"
    node: Wallet!
}

type WalletMaxAggregate {
    id: Float
    input_money: Float
    number: String
    type: String
}

type WalletMinAggregate {
    id: Float
    input_money: Float
    number: String
    type: String
}

type WalletStatistics {
    amount: Float!
    total: Float!
}

type WalletSumAggregate {
    id: Float
    input_money: Float
}

enum PaymentSortFields {
    amount
    comment
    currency
    id
    is_paid
    referral_id
    user_id
    user_wallet_number
    wallet_id
}

"Sort Directions"
enum SortDirection {
    ASC
    DESC
}

"Sort Nulls Options"
enum SortNulls {
    NULLS_FIRST
    NULLS_LAST
}

enum StatisticSortFields {
    id
    users
}

enum UserSortFields {
    balance
    firstname
    id
    lastname
    referral_counter
    referral_money
    username
    who_invite
}

enum WalletSortFields {
    id
    input_money
    is_active
    number
    type
}

input BooleanFieldComparison {
    is: Boolean
    isNot: Boolean
}

input CheckPaymentInput {
    comment: String!
}

input CreateManyPaymentsInput {
    "Array of records to create"
    payments: [PaymentCreate!]!
}

input CreateManyStatisticsInput {
    "Array of records to create"
    statistics: [StatisticCreate!]!
}

input CreateManyUsersInput {
    "Array of records to create"
    users: [UserCreate!]!
}

input CreateManyWalletsInput {
    "Array of records to create"
    wallets: [WalletCreate!]!
}

input CreateOnePaymentInput {
    "The record to create"
    payment: PaymentCreate!
}

input CreateOneStatisticInput {
    "The record to create"
    statistic: StatisticCreate!
}

input CreateOneUserInput {
    "The record to create"
    user: UserCreate!
}

input CreateOneWalletInput {
    "The record to create"
    wallet: WalletCreate!
}

input CursorPaging {
    "Paginate after opaque cursor"
    after: ConnectionCursor
    "Paginate before opaque cursor"
    before: ConnectionCursor
    "Paginate first"
    first: Int
    "Paginate last"
    last: Int
}

input DeleteManyPaymentsInput {
    "Filter to find records to delete"
    filter: PaymentDeleteFilter!
}

input DeleteManyStatisticsInput {
    "Filter to find records to delete"
    filter: StatisticDeleteFilter!
}

input DeleteManyUsersInput {
    "Filter to find records to delete"
    filter: UserDeleteFilter!
}

input DeleteManyWalletsInput {
    "Filter to find records to delete"
    filter: WalletDeleteFilter!
}

input DeleteOneInput {
    "The id of the record to delete."
    id: ID!
}

input NumberFieldComparison {
    between: NumberFieldComparisonBetween
    eq: Float
    gt: Float
    gte: Float
    in: [Float!]
    is: Boolean
    isNot: Boolean
    lt: Float
    lte: Float
    neq: Float
    notBetween: NumberFieldComparisonBetween
    notIn: [Float!]
}

input NumberFieldComparisonBetween {
    lower: Float!
    upper: Float!
}

input PaymentCreate {
    amount: Float!
    user_id: String!
    wallet_id: Float!
}

input PaymentDeleteFilter {
    amount: NumberFieldComparison
    and: [PaymentDeleteFilter!]
    comment: StringFieldComparison
    currency: StringFieldComparison
    id: NumberFieldComparison
    is_paid: BooleanFieldComparison
    or: [PaymentDeleteFilter!]
    referral_id: StringFieldComparison
    user_id: StringFieldComparison
    user_wallet_number: StringFieldComparison
    wallet_id: StringFieldComparison
}

input PaymentFilter {
    amount: NumberFieldComparison
    and: [PaymentFilter!]
    comment: StringFieldComparison
    currency: StringFieldComparison
    id: NumberFieldComparison
    is_paid: BooleanFieldComparison
    or: [PaymentFilter!]
    referral_id: StringFieldComparison
    user_id: StringFieldComparison
    user_wallet_number: StringFieldComparison
    wallet_id: StringFieldComparison
}

input PaymentSort {
    direction: SortDirection!
    field: PaymentSortFields!
    nulls: SortNulls
}

input PaymentUpdate {
    amount: String!
    currency: String!
    referral_id: String!
    referral_money: Float!
    status: Boolean!
    user_wallet_number: String!
}

input PaymentUpdateFilter {
    amount: NumberFieldComparison
    and: [PaymentUpdateFilter!]
    comment: StringFieldComparison
    currency: StringFieldComparison
    id: NumberFieldComparison
    is_paid: BooleanFieldComparison
    or: [PaymentUpdateFilter!]
    referral_id: StringFieldComparison
    user_id: StringFieldComparison
    user_wallet_number: StringFieldComparison
    wallet_id: StringFieldComparison
}

input RelationInput {
    "The id of the record."
    id: ID!
    "The id of relation."
    relationId: ID!
}

input StatisticCreate {
    id: Float!
    payments: String!
    users: Float!
}

input StatisticDeleteFilter {
    and: [StatisticDeleteFilter!]
    id: NumberFieldComparison
    or: [StatisticDeleteFilter!]
    users: NumberFieldComparison
}

input StatisticFilter {
    and: [StatisticFilter!]
    id: NumberFieldComparison
    or: [StatisticFilter!]
    users: NumberFieldComparison
}

input StatisticSort {
    direction: SortDirection!
    field: StatisticSortFields!
    nulls: SortNulls
}

input StatisticUpdateFilter {
    and: [StatisticUpdateFilter!]
    id: NumberFieldComparison
    or: [StatisticUpdateFilter!]
    users: NumberFieldComparison
}

input StatisticsInput {
    "format: 20211130"
    endDate: Float
    payments: Boolean!
    period: String
    "format: 20211025"
    startDate: Float
    users: Boolean!
}

input StringFieldComparison {
    eq: String
    gt: String
    gte: String
    iLike: String
    in: [String!]
    is: Boolean
    isNot: Boolean
    like: String
    lt: String
    lte: String
    neq: String
    notILike: String
    notIn: [String!]
    notLike: String
}

input UpdateManyPaymentsInput {
    "Filter used to find fields to update"
    filter: PaymentUpdateFilter!
    "The update to apply to all records found using the filter"
    update: PaymentUpdate!
}

input UpdateManyStatisticsInput {
    "Filter used to find fields to update"
    filter: StatisticUpdateFilter!
    "The update to apply to all records found using the filter"
    update: UpdateStatistic!
}

input UpdateManyUsersInput {
    "Filter used to find fields to update"
    filter: UserUpdateFilter!
    "The update to apply to all records found using the filter"
    update: UserUpdate!
}

input UpdateManyWalletsInput {
    "Filter used to find fields to update"
    filter: WalletUpdateFilter!
    "The update to apply to all records found using the filter"
    update: UpdateWallet!
}

input UpdateOnePaymentInput {
    "The id of the record to update"
    id: ID!
    "The update to apply."
    update: PaymentUpdate!
}

input UpdateOneStatisticInput {
    "The id of the record to update"
    id: ID!
    "The update to apply."
    update: UpdateStatistic!
}

input UpdateOneUserInput {
    "The id of the record to update"
    id: ID!
    "The update to apply."
    update: UserUpdate!
}

input UpdateOneWalletInput {
    "The id of the record to update"
    id: ID!
    "The update to apply."
    update: UpdateWallet!
}

input UpdateStatistic {
    created: DateTime
    id: Float
    payments: String
    updated: DateTime
    users: Float
}

input UpdateWallet {
    created: DateTime
    id: Float
    input_money: Float
    is_active: Boolean
    number: String
    token: String
    type: String
    updated: DateTime
}

input UserCreate {
    firstname: String
    id: String!
    lang: String!
    lastname: String
    username: String
    who_invite: String
}

input UserDeleteFilter {
    and: [UserDeleteFilter!]
    balance: NumberFieldComparison
    firstname: StringFieldComparison
    id: StringFieldComparison
    lastname: StringFieldComparison
    or: [UserDeleteFilter!]
    referral_counter: NumberFieldComparison
    referral_money: NumberFieldComparison
    username: StringFieldComparison
    who_invite: StringFieldComparison
}

input UserFilter {
    and: [UserFilter!]
    balance: NumberFieldComparison
    firstname: StringFieldComparison
    id: StringFieldComparison
    lastname: StringFieldComparison
    or: [UserFilter!]
    referral_counter: NumberFieldComparison
    referral_money: NumberFieldComparison
    username: StringFieldComparison
    who_invite: StringFieldComparison
}

input UserSort {
    direction: SortDirection!
    field: UserSortFields!
    nulls: SortNulls
}

input UserUpdate {
    balance: Float
    firstname: String
    lang: String
    lastname: String
    referral_counter: Float
    referral_money: Float
    reminder_time: Float
    username: String
}

input UserUpdateFilter {
    and: [UserUpdateFilter!]
    balance: NumberFieldComparison
    firstname: StringFieldComparison
    id: StringFieldComparison
    lastname: StringFieldComparison
    or: [UserUpdateFilter!]
    referral_counter: NumberFieldComparison
    referral_money: NumberFieldComparison
    username: StringFieldComparison
    who_invite: StringFieldComparison
}

input WalletCreate {
    number: String!
    token: String!
    type: String!
}

input WalletDeleteFilter {
    and: [WalletDeleteFilter!]
    id: NumberFieldComparison
    input_money: NumberFieldComparison
    is_active: BooleanFieldComparison
    number: StringFieldComparison
    or: [WalletDeleteFilter!]
    type: StringFieldComparison
}

input WalletFilter {
    and: [WalletFilter!]
    id: NumberFieldComparison
    input_money: NumberFieldComparison
    is_active: BooleanFieldComparison
    number: StringFieldComparison
    or: [WalletFilter!]
    type: StringFieldComparison
}

input WalletSort {
    direction: SortDirection!
    field: WalletSortFields!
    nulls: SortNulls
}

input WalletUpdateFilter {
    and: [WalletUpdateFilter!]
    id: NumberFieldComparison
    input_money: NumberFieldComparison
    is_active: BooleanFieldComparison
    number: StringFieldComparison
    or: [WalletUpdateFilter!]
    type: StringFieldComparison
}


"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime

"Cursor for paging through collections"
scalar ConnectionCursor
